// _____________________________________________________________________________
//
//  ROMphonix RPG - skills.h
//
//  Contains data structures relating to skills that phones can use in battle.
//  Also see assets/data/skills.json and scripts/json2tfs.py
// _____________________________________________________________________________
//
#ifndef SKILLS_H
#define SKILLS_H

#include "common.h"

// Should match the structure and values generated by assets/data/json2tfs.py

typedef enum SkillType {
    SKT_SCREEN,
    SKT_BOARD,
    SKT_COVER,
    SKT_BATTERY
} SkillType;

static const char *skillTypes[4] = {
    "Screen", "Board", "Cover", "Battery"
};

// Skill effect types
// These are implemented in battle/logic.c - doMove()
typedef enum SkillEffectType {
    SE_NONE,  // Does nothing (e.g. the secondary effect if the skill only has one effect)
    SE_DAMAGE,  // Does X damage to the enemy (X being the effect parameter)
    SE_SELF_DAMAGE,  // Does X damage to the user
    SE_HEAL,  // Gives X health to the user
    SE_DRAIN,  // Drains X health from the enemy and gives it to the user
    SE_CONFUSE,  // Confuses the enemy with a X% chance
    SE_ATK_UP,  // Increases the user's attack for X turns
    SE_DEF_UP,  // Increases the user's defense for X turns
    SE_ACCURACY_UP,  // Increases the user's accuracy for X turns
    SE_ACCURACY_DOWN,  // Decreases enemy's accuracy for X turns

    // Effects exclusive to specific skills
    SE_STOMP,  // Deals damage based on body weight
    SE_FLEX_RIP,  // Deals increased damage to flip/slider phones
} SkillEffectType;

// Skill effects (unlike skill effect types, these have more info attached to
// them, and thus are specific to a skill). 
// Each skill has two of these, with their own chances (accuracies) and 
// parameters (such as amount of damage). Some skills may only have one effect
// - in this case, the secondary effect is SE_NONE.
// If the primary (first) effect's accuracy check fails, then the secondary
// effect won't be processed at all. If the first succeeds and the second fails,
// the move will be run as if the second effect didn't exist at all (i.e. no
// messages related to the secondary effect are shown).
typedef struct SkillEffect {
    SkillEffectType effect;
    int parameter;
    int chance;
} SkillEffect;

typedef struct SkillSpecs {
    char name[16];
    char description[128];
    SkillType type;
    int energy;

    SkillEffect effects[2];

    char learnByPhones[256];
    char animation[64];
    int animationTarget; // 0 = self, 1 = enemy
} SkillSpecs;

typedef struct SkillDatabase {
    u32 size;
    SkillSpecs skills[];
} SkillDatabase;

#endif